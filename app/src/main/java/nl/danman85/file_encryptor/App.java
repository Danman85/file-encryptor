/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nl.danman85.file_encryptor;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.stage.Stage;
import nl.danman85.file_encryptor.client.Client;
import nl.danman85.file_encryptor.client.configuration.ConfigException;
import nl.danman85.file_encryptor.client.configuration.ConfigValidator;
import nl.danman85.file_encryptor.client.views.FXMLLoaderFactory;
import nl.danman85.file_encryptor.exception.ExceptionWhitelistRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import java.util.Arrays;

public class App extends Application {

    public static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {
        LOGGER.info("Starting Application");
        launch(args);
    }

    @Override
    public void start(final Stage stage) throws Exception {

        var exceptionHandler = new ApplicationExceptionLoggingHandler();

        validateConfig();

        try {
            final var loaderFactory = new FXMLLoaderFactory();
            final var client = new Client(loaderFactory);
            client.start(stage);
        } catch (final Exception e) {
            exceptionHandler.handle(e);
        }
    }

    private void validateConfig() {
        final var validator = new ConfigValidator();
        try {
            validator.validate();
        } catch (ConfigException e) {
            LOGGER.error("Configuration validation failed, exiting application");
            Platform.exit();
        }
    }

    /**
     * Handles logging for Exceptions.
     *
     * It is possible to white-list certain exceptions in the {@link ExceptionWhitelistRegistry}.
     * If an exception is whitelisted, the application remains running. Be careful with this feature.
     */
    private static class ApplicationExceptionLoggingHandler {

        public static final Logger LOGGER = LoggerFactory.getLogger(App.class);

        public void handle(@Nonnull final Exception e) {
            logException(e);
        }

        private void logException(final Exception e) {
            if (Arrays.stream(ExceptionWhitelistRegistry.WHITE_FLAGGED).noneMatch(whiteListedClass -> e.getClass().equals(whiteListedClass))) {
                LOGGER.error("Uncaught Exception encountered, exiting application", e);
                Platform.exit();
            } else {
                LOGGER.warn("Encountered white listed Exception, resuming activities", e);
            }
        }
    }
}
